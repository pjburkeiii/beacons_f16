import jsonimport requestsimport datetimefrom flask import Flask, jsonify, requestapp = Flask(__name__)# YOUR CANVAS KEYcanvasKey = '4511~U5CTjXuSLJKdaAoFTSRv7GeIFd1lGzDYVohzKHeHqUbfW1MTVQ0L1kFX1Fzkjx9Y'courseID_1 = 36417 #exploration of beacons#static dataitems = { 'uuid1': 'item1', 'uuid2': 'item2', 'uuid3': 'item3', 'uuid4': 'item4' }users = {  }def assoc_itemUUID(uuid):	return items[uuid]def assoc_courseUUID(uuid):	return courseID_1def get_user_id():	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/users/self/profile', params=op)	return req.json()['id']	def get_file_id(courseID, folderPath, fileName):	id = 0	op = {'access_token': canvasKey}		# get folder ID from path	req1 = requests.get( ('https://canvas.vt.edu/api/v1/courses/' + str(courseID) + 			'/folders/by_path' + folderPath ), params=op)		# list files in folder	req2 = requests.get( ('https://canvas.vt.edu/api/v1/folders/' + 		str(req1.json()[len(req1.json()) - 1]['id']) + '/files' ), params=op)		# get file ID from list	for i in range(0, len(req2.json())):		if(req2.json()[i]['filename'] == fileName):			id = req2.json()[i]['id']		return iddef get_file_url(fileID):	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/files/' + str(fileID), params=op)	return req.json()['url']	# function looks at the groups for the specified user and returns the groups name (str) # of the group for the respective coursedef get_group_name(courseID, userID):	group = ''	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/users/' + str(userID) + '/groups/', params=op)	for i in range(0, len(req.json())):		if(req.json()[i]['course_id'] == courseID):			group = req.json()[i]['name']	return group@app.route('/get_agenda', methods=['GET'])def return_agenda():	data = {}		# lookup uuid to student id	classID = request.args.get('uuid')	userID = request.args.get('canvas_id')	print classID	print userID		if(userID == None or classID == None):		data = {'error': 'requires uuid key parameter'}	else:		classID = assoc_courseUUID(classID)				url = get_file_url(get_file_id(classID, '/demo/', 'test_file.txt'))		grp = get_group_name(classID, userID)		data = { 'url': str(url), 'group_name': str(grp) }		return jsonify(**data)@app.route('/get_item', methods=['GET'])def return_item():	data = {}	itemID = request.args.get('uuid')	print itemID	if(itemID == None):		data = {'error': 'requires uuid key parameter'}	else:		itemID = assoc_itemUUID(itemID)				# TODO replace these with proper path and files once uploaded		i_top = get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_bottom = get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_right = get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_left = get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))				data = { 'top': str(i_top), 'bottom': str(i_bottom), 'right': str(i_right),			'left': str(i_left) }	return jsonify(**data)print get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))print get_group_name(courseID_1, 'self')print str(datetime.datetime.now().date())app.run(host='208.113.133.165')