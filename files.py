import jsonimport requestsimport datetimefrom flask import Flask, jsonify, requestapp = Flask(__name__)# YOUR CANVAS KEYcanvasKey = '4511~U5CTjXuSLJKdaAoFTSRv7GeIFd1lGzDYVohzKHeHqUbfW1MTVQ0L1kFX1Fzkjx9Y'courseID_1 = 36417 #exploration of beacons#static dataitems = { 'uuid1': 'item1', 'uuid2': 'item2', 'uuid3': 'item3', 'uuid4': 'item4' }usersUUID = 'b9407f30f5f8466eaff925556b57fe6d'users = { 'b9407f30f5f8466eaff925556b57fe6d': 16177, 'b9407f30f5f8466eaff925556b57feee': 32159 }# users: ben, jordandef assoc_itemUUID(uuid):	return items[uuid]def assoc_courseUUID(uuid, major, minor):	return courseID_1def assoc_userUUID(uuid, major, minor):	lookupStr = str(major) + '-' + str(minor)	if( uuid in users.keys() ):		return users[uuid]	else:		return Nonedef get_user_id():	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/users/self/profile', params=op)	return req.json()['id']def get_user_name(canvasID):	username = None	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/courses/' + str(courseID_1) + '/users', params=op)	for i in range(0, len(req.json())):		if(req.json()[i]['id'] == canvasID):			username = req.json()[i]['name']	return usernamedef get_file_id(courseID, folderPath, fileName):	id = 0	op = {'access_token': canvasKey}	# get folder ID from path	req1 = requests.get( ('https://canvas.vt.edu/api/v1/courses/' + str(courseID) + 			'/folders/by_path' + folderPath ), params=op)	# list files in folder	req2 = requests.get( ('https://canvas.vt.edu/api/v1/folders/' + 		str(req1.json()[len(req1.json()) - 1]['id']) + '/files' ), params=op)	# get file ID from list	for i in range(0, len(req2.json())):		if(req2.json()[i]['display_name'] == fileName):			id = req2.json()[i]['id']	return iddef get_file_url(fileID):	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/files/' + str(fileID), params=op)	return req.json()['url']# function looks at the groups for the specified user and returns the groups name (str) # of the group for the respective coursedef get_group_name(courseID, userID):	group = ''	op = {'access_token': canvasKey}	req = requests.get('https://canvas.vt.edu/api/v1/users/' + str(userID) + '/groups/', params=op)	for i in range(0, len(req.json())):		if(req.json()[i]['course_id'] == courseID):			group = req.json()[i]['name']	return group@app.route('/get_agenda', methods=['GET'])def return_agenda():	data = {}	# lookup uuid to student id	uuid = request.args.get('uuid')	major = request.args.get('major')	minor = request.args.get('minor')	userID = request.args.get('canvas_id')	print (uuid, major, minor)	print userID	if( (uuid == None or major == None or minor == None) ):		data = {'error': 'invalid parameter set; requires uuid, major, and minor'}	else:		courseID = assoc_courseUUID(uuid, major, minor)		url = get_file_url(get_file_id(courseID, '/demo/', 'test_file.txt'))		grp = get_group_name(courseID, userID)		data = { 'url': str(url), 'group_name': str(grp) }	return jsonify(**data)@app.route('/get_item', methods=['GET'])def return_item():	data = {}	itemID = request.args.get('uuid')	major = request.args.get('major')        minor = request.args.get('minor')	print itemID	if( (uuid == None or major == None or minor == None) ):		data = {'error': 'requires uuid key parameter'}	else:		itemID = assoc_itemUUID(itemID)		# TODO replace these with proper path and files once uploaded		# add front and back		# ***		i_top =    get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_bottom = get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_right =  get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_left =   get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))		i_front =  get_file_url(get_file_id(courseID_1, '/demo/', 'uuid_left.jpg'))		i_back =   get_file_url(get_file_id(courseID_1, '/demo/', 'uuid_right.jpg'))		data = { 'top': str(i_top), 'bottom': str(i_bottom), 'right': str(i_right),			'left': str(i_left), 'front': str(i_front), 'back': str(i_back) }	return jsonify(**data)@app.route('/get_user', methods=['GET'])def return_user():	data = {}	# lookup uuid to student id	uuid = request.args.get('uuid')	major = request.args.get('major')	minor = request.args.get('minor')	if( (uuid == None or major == None or minor == None) ):		data = {'error': 'invalid parameter set; requires uuid, major, and minor'}	elif( assoc_userUUID(uuid, major, minor) == None ):		data = {'error': 'student not found'}	else:		user = assoc_userUUID(uuid, major, minor)		username = get_user_name(user)		data = {'id': user, 'username': username}	return jsonify(**data)print get_file_url(get_file_id(courseID_1, '/demo/', 'test_file.txt'))print get_group_name(courseID_1, 'self')print str(datetime.datetime.now().date())app.run(host='208.113.128.75', port=5000)